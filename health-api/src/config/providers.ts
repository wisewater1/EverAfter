import { Provider } from '@prisma/client';
import { ProviderConfig } from '../types/index.js';

export const PROVIDER_CONFIGS: Record<Provider, ProviderConfig> = {
  [Provider.TERRA]: {
    id: Provider.TERRA,
    name: 'Terra',
    authUrl: 'https://api.tryterra.co/v2/auth/authenticateUser',
    tokenUrl: 'https://api.tryterra.co/v2/auth/generateAuthToken',
    clientId: process.env.TERRA_DEV_ID || '',
    clientSecret: process.env.TERRA_API_KEY || '',
    scopes: ['activity', 'sleep', 'body', 'daily', 'nutrition'],
    supportsWebhooks: true,
    supportsPolling: true,
  },
  [Provider.FITBIT]: {
    id: Provider.FITBIT,
    name: 'Fitbit',
    authUrl: 'https://www.fitbit.com/oauth2/authorize',
    tokenUrl: 'https://api.fitbit.com/oauth2/token',
    clientId: process.env.FITBIT_CLIENT_ID || '',
    clientSecret: process.env.FITBIT_CLIENT_SECRET || '',
    scopes: ['activity', 'heartrate', 'sleep', 'weight', 'profile'],
    supportsWebhooks: true,
    supportsPolling: true,
  },
  [Provider.OURA]: {
    id: Provider.OURA,
    name: 'Oura Ring',
    authUrl: 'https://cloud.ouraring.com/oauth/authorize',
    tokenUrl: 'https://api.ouraring.com/oauth/token',
    clientId: process.env.OURA_CLIENT_ID || '',
    clientSecret: process.env.OURA_CLIENT_SECRET || '',
    scopes: ['personal', 'daily', 'heartrate', 'workout', 'session'],
    supportsWebhooks: true,
    supportsPolling: true,
  },
  [Provider.DEXCOM]: {
    id: Provider.DEXCOM,
    name: 'Dexcom CGM',
    authUrl: 'https://api.dexcom.com/v2/oauth2/login',
    tokenUrl: 'https://api.dexcom.com/v2/oauth2/token',
    clientId: process.env.DEXCOM_CLIENT_ID || '',
    clientSecret: process.env.DEXCOM_CLIENT_SECRET || '',
    scopes: ['offline_access'],
    supportsWebhooks: false,
    supportsPolling: true,
  },
  [Provider.STRAVA]: {
    id: Provider.STRAVA,
    name: 'Strava',
    authUrl: 'https://www.strava.com/oauth/authorize',
    tokenUrl: 'https://www.strava.com/oauth/token',
    clientId: process.env.STRAVA_CLIENT_ID || '',
    clientSecret: process.env.STRAVA_CLIENT_SECRET || '',
    scopes: ['read', 'activity:read_all'],
    supportsWebhooks: true,
    supportsPolling: true,
  },
  [Provider.WHOOP]: {
    id: Provider.WHOOP,
    name: 'Whoop',
    authUrl: 'https://api.prod.whoop.com/oauth/oauth2/auth',
    tokenUrl: 'https://api.prod.whoop.com/oauth/oauth2/token',
    clientId: process.env.WHOOP_CLIENT_ID || '',
    clientSecret: process.env.WHOOP_CLIENT_SECRET || '',
    scopes: ['read:recovery', 'read:sleep', 'read:workout', 'read:profile'],
    supportsWebhooks: false,
    supportsPolling: true,
  },
  [Provider.GARMIN]: {
    id: Provider.GARMIN,
    name: 'Garmin',
    authUrl: 'https://connect.garmin.com/oauthConfirm',
    tokenUrl: 'https://connectapi.garmin.com/oauth-service/oauth/access_token',
    clientId: process.env.GARMIN_CONSUMER_KEY || '',
    clientSecret: process.env.GARMIN_CONSUMER_SECRET || '',
    scopes: [],
    supportsWebhooks: true,
    supportsPolling: false,
  },
  [Provider.WITHINGS]: {
    id: Provider.WITHINGS,
    name: 'Withings',
    authUrl: 'https://account.withings.com/oauth2_user/authorize2',
    tokenUrl: 'https://wbsapi.withings.net/v2/oauth2',
    clientId: process.env.WITHINGS_CLIENT_ID || '',
    clientSecret: process.env.WITHINGS_CLIENT_SECRET || '',
    scopes: ['user.metrics', 'user.activity'],
    supportsWebhooks: true,
    supportsPolling: true,
  },
  [Provider.POLAR]: {
    id: Provider.POLAR,
    name: 'Polar',
    authUrl: 'https://flow.polar.com/oauth2/authorization',
    tokenUrl: 'https://polarremote.com/v2/oauth2/token',
    clientId: process.env.POLAR_CLIENT_ID || '',
    clientSecret: process.env.POLAR_CLIENT_SECRET || '',
    scopes: [],
    supportsWebhooks: false,
    supportsPolling: true,
  },
  [Provider.GOOGLE_FIT]: {
    id: Provider.GOOGLE_FIT,
    name: 'Google Fit',
    authUrl: 'https://accounts.google.com/o/oauth2/v2/auth',
    tokenUrl: 'https://oauth2.googleapis.com/token',
    clientId: process.env.GOOGLE_FIT_CLIENT_ID || '',
    clientSecret: process.env.GOOGLE_FIT_CLIENT_SECRET || '',
    scopes: [
      'https://www.googleapis.com/auth/fitness.activity.read',
      'https://www.googleapis.com/auth/fitness.heart_rate.read',
      'https://www.googleapis.com/auth/fitness.sleep.read',
    ],
    supportsWebhooks: false,
    supportsPolling: true,
  },
  [Provider.ABBOTT_LIBRE]: {
    id: Provider.ABBOTT_LIBRE,
    name: 'Abbott LibreView',
    authUrl: 'https://api.libreview.io/auth/authorize',
    tokenUrl: 'https://api.libreview.io/auth/token',
    clientId: process.env.ABBOTT_CLIENT_ID || '',
    clientSecret: process.env.ABBOTT_CLIENT_SECRET || '',
    scopes: ['glucose'],
    supportsWebhooks: false,
    supportsPolling: true,
  },
  [Provider.APPLE_HEALTH]: {
    id: Provider.APPLE_HEALTH,
    name: 'Apple HealthKit',
    authUrl: '',
    tokenUrl: '',
    clientId: '',
    clientSecret: process.env.APPLE_HEALTH_BRIDGE_SECRET || '',
    scopes: [],
    supportsWebhooks: false,
    supportsPolling: false,
  },
  [Provider.SAMSUNG_HEALTH]: {
    id: Provider.SAMSUNG_HEALTH,
    name: 'Samsung Health Connect',
    authUrl: '',
    tokenUrl: '',
    clientId: '',
    clientSecret: process.env.HEALTH_CONNECT_BRIDGE_SECRET || '',
    scopes: [],
    supportsWebhooks: false,
    supportsPolling: false,
  },
  [Provider.MYFITNESSPAL]: {
    id: Provider.MYFITNESSPAL,
    name: 'MyFitnessPal',
    authUrl: '',
    tokenUrl: '',
    clientId: '',
    clientSecret: '',
    scopes: [],
    supportsWebhooks: false,
    supportsPolling: false,
  },
  [Provider.VALIDIC]: {
    id: Provider.VALIDIC,
    name: 'Validic',
    authUrl: '',
    tokenUrl: '',
    clientId: '',
    clientSecret: '',
    scopes: [],
    supportsWebhooks: true,
    supportsPolling: true,
  },
  [Provider.HUMAN_API]: {
    id: Provider.HUMAN_API,
    name: 'Human API',
    authUrl: '',
    tokenUrl: '',
    clientId: '',
    clientSecret: '',
    scopes: [],
    supportsWebhooks: true,
    supportsPolling: true,
  },
  [Provider.METRIPORT]: {
    id: Provider.METRIPORT,
    name: 'Metriport',
    authUrl: '',
    tokenUrl: '',
    clientId: '',
    clientSecret: '',
    scopes: [],
    supportsWebhooks: true,
    supportsPolling: true,
  },
  [Provider.ROOK]: {
    id: Provider.ROOK,
    name: 'ROOK',
    authUrl: '',
    tokenUrl: '',
    clientId: '',
    clientSecret: '',
    scopes: [],
    supportsWebhooks: true,
    supportsPolling: true,
  },
  [Provider.SPIKE]: {
    id: Provider.SPIKE,
    name: 'Spike API',
    authUrl: '',
    tokenUrl: '',
    clientId: '',
    clientSecret: '',
    scopes: [],
    supportsWebhooks: true,
    supportsPolling: true,
  },
};

export function getProviderConfig(provider: Provider): ProviderConfig {
  const config = PROVIDER_CONFIGS[provider];
  if (!config) {
    throw new Error(`Provider config not found for: ${provider}`);
  }
  return config;
}

export function isProviderConfigured(provider: Provider): boolean {
  const config = PROVIDER_CONFIGS[provider];
  return !!(config.clientId && config.clientSecret);
}
